getwd()
##header
source('0_header.R')
root='/Users/haoge/Dropbox/Research/NetworkExperiment/'
working_path=paste0(root,'2_simulation_s/')
data_path=paste0(root,'FinalData/net_complete_natvillage.RData')
setwd(working_path)
load(data_path)
data_path_Y_impute=paste0(root,'FinData/')
data_path_Y2=paste0(root,'FinalData/Y_sim2.csv')
data_path_Y_impute=paste0(root,'FinalData/Y_sim2.csv')
Y_impute=read.csv(data_path_Y2)
data_path_Y_impute=paste0(root,'FinalData/Y_imputed.csv')
data_path_Y_impute
Y_impute=read.csv(data_path_Y_impute)
View(Y_impute)
#source('./functions/functions4.R')
#source('./functions/functions5.R')
#source('./functions/functions6.R')
source('./functions/functions7.R')
input=1
expo1=1
expo2=2
weight=0
#id information
id_t = net %v% 'vertex.names'
degree_t=degree(net,cmode='outdegree') #warning some units have only two friends so some exposure mappings are not defined
#depending on exposure mapping some units must be dropped for identification reasons:
if (expo1 == 7 | expo1 == 12 | expo2 ==7 | expo2==12){
number_dropped_t =sum( (id_t[degree_t<3] %in% id_list))
#delete units with less than three friends
id_list=id_list[!id_list %in% id_t[degree_t<3]]
}else if (expo1 == 6 | expo1 == 11 | expo2 ==6 | expo2==11){
number_dropped_t =sum( (id_t[degree_t<2] %in% id_list))
#delete units with less than two friends
id_list=id_list[!id_list %in% id_t[degree_t<2]]
}else{
number_dropped_t =sum( (id_t[degree_t<1] %in% id_list))
#delete units with no friends
id_list=id_list[!id_list %in% id_t[degree_t<1]]
}
##divide into components####
memberships_t=net %v% 'membership'
#extract subjects of interest
subjects_t = (1:pol_size)[id_t %in% id_list]
###basic simulation information
#network size
pol_size = network.size(net)
#extract subjects of interest
subjects_t = (1:pol_size)[id_t %in% id_list]
#extract membership information
subjects_memberships_t=memberships_t[id_t %in% id_list]
#sort subjects according to component index
subjects_t=subjects_t[order(subjects_memberships_t)]
#create dictionary for group belongings
group_index = cumsum(table(subjects_memberships_t))
dict_group=matrix(0,length(group_index),5)
dict_group[,1]=names(group_index)
dict_group[,2]= c(0,group_index[1:(length(group_index)-1)])+1
dict_group[,3]= group_index
dict_group[,4]=c(0,2*group_index[1:(length(group_index)-1)])+1
dict_group[,5]= group_index*2
dict_group<- matrix(as.numeric(dict_group),   ncol = ncol(dict_group))
contrast=c(-1,1)
dict_group
View(Y_impute)
data_path_Y_impute=paste0(root,'FinalData/Y_imputed.csv')
Y_impute=read.csv(data_path_Y_impute)
Y_impute=Y_impute[,2:9]
Y_impute
y0_imp=Y_impute[,expo1+1] #control
y1_imp=Y_sim2[,expo2+1] #treated
y0_imp=Y_impute[,expo1+1] #control
y1_imp=Y_impute[,expo2+1] #treated
Y_all=cbind(y0,y1,y1,y1,y1,y1,y1,y1,y1,y1,y1,y1)
#covariates
x=all_info2[match(id_t,all_info2$id),]
#covariates
x=all_info2[match(id_t,all_info2$id),]
x=x[subjects_t,]
subject_size=length(subjects_t)
#demean X
#pre-treatment covarates and demeaning
x=x[,c('male','age','agpop','literacy','ricearea_2010','risk_averse','disaster_prob')]
for (i in 1:ncol(x)){
x[,i]=(x[,i]-mean(x[,i]))/sd(x[,i])
}
x=as.matrix(x)
#friendship information
friends=matrix(FALSE,nrow=pol_size,ncol=5)
for (i in 1:pol_size){
friend_index_t=get.neighborhood(net,i,'out')
if (length(friend_index_t)==0){
next
}else
friends[i,1:length(friend_index_t)] = friend_index_t
}
status
#treatment status vectors/num of mappings
status = 1:4
num_mappings = 12
View(SIM_ONERUN_IMPUTED_AUG20_AS2)
print('here')
est_sim=rep(0,11)
var_sim=rep(0,11)
var_sim2=rep(0,11)
realized_assignment=sample(status,pol_size,replace=TRUE,prob=prob)
#generate random assignments
if (option=='Bernoulli'){
realized_assignment=sample(status,pol_size,replace=TRUE,prob=prob)
}else if (option=='Stratified'){
temp=cbind(net %v% "group",net %v% "assignment")
realized_assignment=ASSIGNMENT(temp)
}
prob=c(0.25,0.25,0.25,0.25)
#generate random assignments
if (option=='Bernoulli'){
realized_assignment=sample(status,pol_size,replace=TRUE,prob=prob)
}else if (option=='Stratified'){
temp=cbind(net %v% "group",net %v% "assignment")
realized_assignment=ASSIGNMENT(temp)
}
temp=cbind(net %v% "group",net %v% "assignment")
realized_assignment=ASSIGNMENT(temp)
#packages
library(statnet)
########################################################
#############  set working path  and load data##########
########################################################
#set working path
root = '/home/hc654/NetworkExperiment/'
working_path=paste0(root,'2_simulation_s/')
data_path=paste0(root,'FinalData/net_complete_natvillage.RData')
setwd(working_path)
temp=cbind(net %v% "group",net %v% "assignment")
realized_assignment=ASSIGNMENT(temp)
temp
getwd()
working_path
working_path='/Users/haoge/Dropbox/Research/NetworkExperiment/2_simulation_s'
working_path=paste0(root,'2_simulation_s/')
#Import functions
source('./functions/functions.R')
realized_assignment=ASSIGNMENT(temp)
realized_assignment
#calculate exposures
exposure = matrix(0,nrow=pol_size,ncol=7)
exposure[,1]=1:pol_size #vertex indices
exposure[,2]=realized_assignment==1
exposure[,3]=realized_assignment==2
exposure[,4]=realized_assignment==3
exposure[,5]=realized_assignment==4
num_friend_treated = apply(friends,1,FRIEND_TREATED,realized_assignment)
exposure[,6]=num_friend_treated[1,]
exposure[,7]=num_friend_treated[2,]
exposure_t = exposure[subjects_t,2:7]
subjects_t
state_t=individual_exposure(exposure_t)
View(individual_exposure_factorial)
state_t=INDIVIDUAL_EXPOSURE(exposure_t)
state_t = state_t[c(expo1,expo2)]
y0_t = state_t[expo1] * y0
y1_t = state_t[expo2] * y1
y0=y0_imp
y1=y1_imp
y0_t = state_t[expo1] * y0
y1_t = state_t[expo2] * y1
state_t
state_t=INDIVIDUAL_EXPOSURE(exposure_t)
state_t=apply(exposure_t,1,INDIVIDUAL_EXPOSURE)
state_t = state_t[c(expo1,expo2),]
y0_t = state_t[1,] * y0
y1_t = state_t[2,] * y1
temp=net %v%
net
temp=net %v% vertex.nams
temp=net %v% vertex.names
temp=net %v% vertex.names
temp=net %v% 'vertex.names'
temp
#prepare y and x informations, in the order of group beloings
Y=Y_imputed[match(id_t,Y_imputed[,1]),c(1,expo1+1,expo2+1)]
#prepare y and x informations, in the order of group beloings
Y=Y_impute[match(id_t,Y_impute[,1]),c(1,expo1+1,expo2+1)]
View(Y)
?match
#prepare y and x informations, in the order of group beloings
Y=Y_impute[match(id_t,Y_impute[,1]),c(1,expo1+1,expo2+1)]
Y=Y[subjects_t,]
subjects_t
subjects_memberships_t
order(subjects_memberships_t)
#prepare y and x informations, in the order of group beloings
Y=Y_impute[match(id_t,Y_impute[,1]),c(1,expo1+1,expo2+1)]
#Y_all=Y_all[match(id_t,Y_all[,1]),]
#Y_all=Y_sim2[match(id_t,Y_sim2[,1]),]
Y_all=Y[subjects_t,]
View(Y_all)
table(Yall[,c(2,3)])
table(Y)all[,c(2,3)])
table(Y_all[,c(2,3)])
View(Y_all)
