## #######################################
## Reanalysis of Network Field Experiment
## #######################################
rm(list=ls())
library(MASS) # ver 7.3-51.5
library(latex2exp)  # ver 0.4.0
library("estimatr") # ver 0.22.0
library("Formula")  # ver 1.2-3
source("estimator.R") # load function
setwd('/Users/haoge/Downloads/replication_PA_submit/code/Cui/Cui_analysis.R')
setwd('/Users/haoge/Downloads/replication_PA_submit/code/Cui/')
source("estimator.R") # load function
# load data
load(file = "../data/Cui.rdata")
getwd()
setwd('/Users/haoge/Downloads/replication_PA_submit/code/')
library(MASS) # ver 7.3-51.5
library(latex2exp)  # ver 0.4.0
library("estimatr") # ver 0.22.0
library("Formula")  # ver 1.2-3
source("estimator.R") # load function
# load data
load(file = "../data/Cui.rdata")
View(survey_data_full)
rm(list=ls())
library(statnet)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
#setwd("/Users/haoge/Library/CloudStorage/GoogleDrive-hgchang1508@gmail.com/My Drive/UnifiedDesignBasedInference/Cai(2015)Insurance/FinalData/")
setwd("/Volumes/GoogleDrive/My Drive/UnifiedDesignBasedInference/Cai(2015)Insurance/FinalData/")
rm(list=ls())
library(statnet)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
################################################
####Set working directory########################
################################################
setwd("/Users/haoge/Dropbox/Research/AnalysisExperiment/Cai(2015)/FinalData")
################################################################
####Load Preprocessed Dat from script Data_Cleaning.R ##########
################################################################
network_info=read.csv("network_info.csv") #network information
all_info=read.csv("all_info.csv") #all information (including covariates)
#create a net object
relation_data <- network_info[,c('id','network_id')]
net <- network(relation_data,matrix.type="edgelist")
#create a net object
relation_data <- network_info[,c('id','network_id')]
net <- network(relation_data,matrix.type="edgelist")
#administrative villages
id_list=net %v% "vertex.names"
villages= all_info[match(id_list,all_info$id),"village"]
sum(is.na(villages)) #check missing values
net %v% "village" = villages #add village information to the network object
#natural village
id_list=net %v% "vertex.names"
nat_villages= all_info[match(id_list,all_info$id),"address"]
sum(is.na(nat_villages))
net %v% "nat_village" = nat_villages
#47 villages
length(unique(net%v%"village"))
#number of households
network.size(net)
#max in and out degree degree
max(degree(net,cmode="outdegree"))
max(degree(net,cmode="indegree"))
max(degree(net,cmode="freeman"))
#inspect graph
components(net,'weak')
#number of households
network.size(net)
#max degree
max(degree(net,gmode="graph"))
#plotting the graph
par(mfrow=c(1,1))
#for coloring
village_color = as.factor(get.vertex.attribute(net,'village'))
coul <- brewer.pal(11,'Spectral')
coul <- colorRampPalette(coul)(length(levels(village_color)))
legend_village = as.numeric(as.character(factor(village_color)))
temp=cbind(coul[village_color],legend_village )
temp=data.frame(temp)
color_list=distinct(temp)
color_list=color_list[order(as.numeric(color_list[,2])),]
#ploting
pdf(file="Friendships_Complete_Village_Info.pdf",
width = 8, height = 7, # Width and height in inches
bg = "white",          # Background color
colormodel = "cmyk",    # Color model (cmyk is required for most publications)
paper = "A4")
gplot(net,gmode='graph',mode="kamadakawai",vertex.col = coul[village_color], vertex.cex = 1.5,main="Reported Friendships, Complete Village Info")
legend("bottomleft",legend=color_list[order(as.numeric(color_list[,2]))[25:47],2],col=color_list[order(as.numeric(color_list[,2]))[25:47],1],pch=19,pt.cex=1.5,bty="n")
legend("bottomright",legend=color_list[order(as.numeric(color_list[,2]))[1:24],2],col=color_list[order(as.numeric(color_list[,2]))[1:24],1],pch=19,pt.cex=1.5,bty="n",
title="Admin Villages")
dev.off()
##############################################################################
########################component statistics##################################
##############################################################################
#plotting a component
membership=component.dist(net,connected='weak')$membership
membership_info= cbind(1:length(membership),membership)#info for graphing
net %v% "membership" = membership
compare=cbind(get.vertex.attribute(net,"membership"),get.vertex.attribute(net,"nat_village"))
colnames(compare)=c('membership','nat_village')
##check village belongings
nat_villages= unique(compare[,2])
result=matrix(0,length(nat_villages),2)
result[,1]=nat_villages
for (i in 1:length(nat_villages)){
temp_village=nat_villages[i]
membership_temp=compare[which(compare[,2]==temp_village),1]
result[i,2]=length(unique(membership_temp))
}
head(result[order(result[,2],decreasing=TRUE),])
all_info2[all_info2$address==34,]
#max degree
max(degree(net,gmode="graph"))
#plotting the graph
par(mfrow=c(1,1))
#for coloring
village_color = as.factor(get.vertex.attribute(net,'village'))
coul <- brewer.pal(11,'Spectral')
coul <- colorRampPalette(coul)(length(levels(village_color)))
legend_village = as.numeric(as.character(factor(village_color)))
temp=cbind(coul[village_color],legend_village )
temp=data.frame(temp)
color_list=distinct(temp)
color_list=color_list[order(as.numeric(color_list[,2])),]
#ploting
pdf(file="Friendships_Complete_Village_Info.pdf",
width = 8, height = 7, # Width and height in inches
bg = "white",          # Background color
colormodel = "cmyk",    # Color model (cmyk is required for most publications)
paper = "A4")
gplot(net,gmode='graph',mode="kamadakawai",vertex.col = coul[village_color], vertex.cex = 1.5,main="Reported Friendships, Complete Village Info")
legend("bottomleft",legend=color_list[order(as.numeric(color_list[,2]))[25:47],2],col=color_list[order(as.numeric(color_list[,2]))[25:47],1],pch=19,pt.cex=1.5,bty="n")
legend("bottomright",legend=color_list[order(as.numeric(color_list[,2]))[1:24],2],col=color_list[order(as.numeric(color_list[,2]))[1:24],1],pch=19,pt.cex=1.5,bty="n",
title="Admin Villages")
dev.off()
